// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.0
// source: dy_pay.proto

package douyin_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DyPay_TradeTransaction_FullMethodName            = "/douyin_pb.DyPay/TradeTransaction"
	DyPay_TradeTransactionOrderQuery_FullMethodName  = "/douyin_pb.DyPay/TradeTransactionOrderQuery"
	DyPay_TradeRefundTransaction_FullMethodName      = "/douyin_pb.DyPay/TradeRefundTransaction"
	DyPay_TradeRefundTransactionQuery_FullMethodName = "/douyin_pb.DyPay/TradeRefundTransactionQuery"
)

// DyPayClient is the client API for DyPay service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DyPayClient interface {
	TradeTransaction(ctx context.Context, in *PayTransactionRequest, opts ...grpc.CallOption) (*PayTransactionReply, error)
	TradeTransactionOrderQuery(ctx context.Context, in *TransactionOrderQueryRequest, opts ...grpc.CallOption) (*TransactionOrderQueryReply, error)
	TradeRefundTransaction(ctx context.Context, in *RefundTransactionRequest, opts ...grpc.CallOption) (*RefundTransactionReply, error)
	TradeRefundTransactionQuery(ctx context.Context, in *RefundTransactionQueryRequest, opts ...grpc.CallOption) (*RefundTransactionQueryReply, error)
}

type dyPayClient struct {
	cc grpc.ClientConnInterface
}

func NewDyPayClient(cc grpc.ClientConnInterface) DyPayClient {
	return &dyPayClient{cc}
}

func (c *dyPayClient) TradeTransaction(ctx context.Context, in *PayTransactionRequest, opts ...grpc.CallOption) (*PayTransactionReply, error) {
	out := new(PayTransactionReply)
	err := c.cc.Invoke(ctx, DyPay_TradeTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dyPayClient) TradeTransactionOrderQuery(ctx context.Context, in *TransactionOrderQueryRequest, opts ...grpc.CallOption) (*TransactionOrderQueryReply, error) {
	out := new(TransactionOrderQueryReply)
	err := c.cc.Invoke(ctx, DyPay_TradeTransactionOrderQuery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dyPayClient) TradeRefundTransaction(ctx context.Context, in *RefundTransactionRequest, opts ...grpc.CallOption) (*RefundTransactionReply, error) {
	out := new(RefundTransactionReply)
	err := c.cc.Invoke(ctx, DyPay_TradeRefundTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dyPayClient) TradeRefundTransactionQuery(ctx context.Context, in *RefundTransactionQueryRequest, opts ...grpc.CallOption) (*RefundTransactionQueryReply, error) {
	out := new(RefundTransactionQueryReply)
	err := c.cc.Invoke(ctx, DyPay_TradeRefundTransactionQuery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DyPayServer is the server API for DyPay service.
// All implementations must embed UnimplementedDyPayServer
// for forward compatibility
type DyPayServer interface {
	TradeTransaction(context.Context, *PayTransactionRequest) (*PayTransactionReply, error)
	TradeTransactionOrderQuery(context.Context, *TransactionOrderQueryRequest) (*TransactionOrderQueryReply, error)
	TradeRefundTransaction(context.Context, *RefundTransactionRequest) (*RefundTransactionReply, error)
	TradeRefundTransactionQuery(context.Context, *RefundTransactionQueryRequest) (*RefundTransactionQueryReply, error)
	mustEmbedUnimplementedDyPayServer()
}

// UnimplementedDyPayServer must be embedded to have forward compatible implementations.
type UnimplementedDyPayServer struct {
}

func (UnimplementedDyPayServer) TradeTransaction(context.Context, *PayTransactionRequest) (*PayTransactionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TradeTransaction not implemented")
}
func (UnimplementedDyPayServer) TradeTransactionOrderQuery(context.Context, *TransactionOrderQueryRequest) (*TransactionOrderQueryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TradeTransactionOrderQuery not implemented")
}
func (UnimplementedDyPayServer) TradeRefundTransaction(context.Context, *RefundTransactionRequest) (*RefundTransactionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TradeRefundTransaction not implemented")
}
func (UnimplementedDyPayServer) TradeRefundTransactionQuery(context.Context, *RefundTransactionQueryRequest) (*RefundTransactionQueryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TradeRefundTransactionQuery not implemented")
}
func (UnimplementedDyPayServer) mustEmbedUnimplementedDyPayServer() {}

// UnsafeDyPayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DyPayServer will
// result in compilation errors.
type UnsafeDyPayServer interface {
	mustEmbedUnimplementedDyPayServer()
}

func RegisterDyPayServer(s grpc.ServiceRegistrar, srv DyPayServer) {
	s.RegisterService(&DyPay_ServiceDesc, srv)
}

func _DyPay_TradeTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DyPayServer).TradeTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DyPay_TradeTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DyPayServer).TradeTransaction(ctx, req.(*PayTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DyPay_TradeTransactionOrderQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionOrderQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DyPayServer).TradeTransactionOrderQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DyPay_TradeTransactionOrderQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DyPayServer).TradeTransactionOrderQuery(ctx, req.(*TransactionOrderQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DyPay_TradeRefundTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefundTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DyPayServer).TradeRefundTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DyPay_TradeRefundTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DyPayServer).TradeRefundTransaction(ctx, req.(*RefundTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DyPay_TradeRefundTransactionQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefundTransactionQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DyPayServer).TradeRefundTransactionQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DyPay_TradeRefundTransactionQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DyPayServer).TradeRefundTransactionQuery(ctx, req.(*RefundTransactionQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DyPay_ServiceDesc is the grpc.ServiceDesc for DyPay service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DyPay_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "douyin_pb.DyPay",
	HandlerType: (*DyPayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TradeTransaction",
			Handler:    _DyPay_TradeTransaction_Handler,
		},
		{
			MethodName: "TradeTransactionOrderQuery",
			Handler:    _DyPay_TradeTransactionOrderQuery_Handler,
		},
		{
			MethodName: "TradeRefundTransaction",
			Handler:    _DyPay_TradeRefundTransaction_Handler,
		},
		{
			MethodName: "TradeRefundTransactionQuery",
			Handler:    _DyPay_TradeRefundTransactionQuery_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dy_pay.proto",
}
