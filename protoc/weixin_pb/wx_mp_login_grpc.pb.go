// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.0
// source: wx_mp_login.proto

package weixin_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	WxMpLogin_Code2Session_FullMethodName   = "/weixin_pb.WxMpLogin/Code2Session"
	WxMpLogin_GetPhoneNumber_FullMethodName = "/weixin_pb.WxMpLogin/GetPhoneNumber"
)

// WxMpLoginClient is the client API for WxMpLogin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WxMpLoginClient interface {
	Code2Session(ctx context.Context, in *MpLoginRequest, opts ...grpc.CallOption) (*MpLoginReply, error)
	GetPhoneNumber(ctx context.Context, in *MpPhoneNumberRequest, opts ...grpc.CallOption) (*MpPhoneNumberReply, error)
}

type wxMpLoginClient struct {
	cc grpc.ClientConnInterface
}

func NewWxMpLoginClient(cc grpc.ClientConnInterface) WxMpLoginClient {
	return &wxMpLoginClient{cc}
}

func (c *wxMpLoginClient) Code2Session(ctx context.Context, in *MpLoginRequest, opts ...grpc.CallOption) (*MpLoginReply, error) {
	out := new(MpLoginReply)
	err := c.cc.Invoke(ctx, WxMpLogin_Code2Session_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wxMpLoginClient) GetPhoneNumber(ctx context.Context, in *MpPhoneNumberRequest, opts ...grpc.CallOption) (*MpPhoneNumberReply, error) {
	out := new(MpPhoneNumberReply)
	err := c.cc.Invoke(ctx, WxMpLogin_GetPhoneNumber_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WxMpLoginServer is the server API for WxMpLogin service.
// All implementations must embed UnimplementedWxMpLoginServer
// for forward compatibility
type WxMpLoginServer interface {
	Code2Session(context.Context, *MpLoginRequest) (*MpLoginReply, error)
	GetPhoneNumber(context.Context, *MpPhoneNumberRequest) (*MpPhoneNumberReply, error)
	mustEmbedUnimplementedWxMpLoginServer()
}

// UnimplementedWxMpLoginServer must be embedded to have forward compatible implementations.
type UnimplementedWxMpLoginServer struct {
}

func (UnimplementedWxMpLoginServer) Code2Session(context.Context, *MpLoginRequest) (*MpLoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Code2Session not implemented")
}
func (UnimplementedWxMpLoginServer) GetPhoneNumber(context.Context, *MpPhoneNumberRequest) (*MpPhoneNumberReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPhoneNumber not implemented")
}
func (UnimplementedWxMpLoginServer) mustEmbedUnimplementedWxMpLoginServer() {}

// UnsafeWxMpLoginServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WxMpLoginServer will
// result in compilation errors.
type UnsafeWxMpLoginServer interface {
	mustEmbedUnimplementedWxMpLoginServer()
}

func RegisterWxMpLoginServer(s grpc.ServiceRegistrar, srv WxMpLoginServer) {
	s.RegisterService(&WxMpLogin_ServiceDesc, srv)
}

func _WxMpLogin_Code2Session_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MpLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WxMpLoginServer).Code2Session(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WxMpLogin_Code2Session_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WxMpLoginServer).Code2Session(ctx, req.(*MpLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WxMpLogin_GetPhoneNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MpPhoneNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WxMpLoginServer).GetPhoneNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WxMpLogin_GetPhoneNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WxMpLoginServer).GetPhoneNumber(ctx, req.(*MpPhoneNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WxMpLogin_ServiceDesc is the grpc.ServiceDesc for WxMpLogin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WxMpLogin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "weixin_pb.WxMpLogin",
	HandlerType: (*WxMpLoginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Code2Session",
			Handler:    _WxMpLogin_Code2Session_Handler,
		},
		{
			MethodName: "GetPhoneNumber",
			Handler:    _WxMpLogin_GetPhoneNumber_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wx_mp_login.proto",
}
