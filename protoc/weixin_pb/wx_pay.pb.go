// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v4.25.0
// source: wx_pay.proto

package weixin_pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 支付请求参数
type PayRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId          string  `protobuf:"bytes,1,opt,name=AppId,proto3" json:"AppId,omitempty"`
	Secret         string  `protobuf:"bytes,2,opt,name=Secret,proto3" json:"Secret,omitempty"`
	MchId          string  `protobuf:"bytes,3,opt,name=MchId,proto3" json:"MchId,omitempty"`
	ApiKey         string  `protobuf:"bytes,4,opt,name=ApiKey,proto3" json:"ApiKey,omitempty"`
	Body           string  `protobuf:"bytes,5,opt,name=Body,proto3" json:"Body,omitempty"`
	Attach         string  `protobuf:"bytes,6,opt,name=Attach,proto3" json:"Attach,omitempty"`
	OutTradeNo     string  `protobuf:"bytes,7,opt,name=OutTradeNo,proto3" json:"OutTradeNo,omitempty"`
	TotalFee       float32 `protobuf:"fixed32,8,opt,name=TotalFee,proto3" json:"TotalFee,omitempty"`
	SpbillCreateIp string  `protobuf:"bytes,9,opt,name=SpbillCreateIp,proto3" json:"SpbillCreateIp,omitempty"`
	OpenId         string  `protobuf:"bytes,10,opt,name=OpenId,proto3" json:"OpenId,omitempty"`
	NotifyUrl      string  `protobuf:"bytes,11,opt,name=NotifyUrl,proto3" json:"NotifyUrl,omitempty"`
}

func (x *PayRequest) Reset() {
	*x = PayRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wx_pay_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayRequest) ProtoMessage() {}

func (x *PayRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wx_pay_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayRequest.ProtoReflect.Descriptor instead.
func (*PayRequest) Descriptor() ([]byte, []int) {
	return file_wx_pay_proto_rawDescGZIP(), []int{0}
}

func (x *PayRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *PayRequest) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

func (x *PayRequest) GetMchId() string {
	if x != nil {
		return x.MchId
	}
	return ""
}

func (x *PayRequest) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

func (x *PayRequest) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

func (x *PayRequest) GetAttach() string {
	if x != nil {
		return x.Attach
	}
	return ""
}

func (x *PayRequest) GetOutTradeNo() string {
	if x != nil {
		return x.OutTradeNo
	}
	return ""
}

func (x *PayRequest) GetTotalFee() float32 {
	if x != nil {
		return x.TotalFee
	}
	return 0
}

func (x *PayRequest) GetSpbillCreateIp() string {
	if x != nil {
		return x.SpbillCreateIp
	}
	return ""
}

func (x *PayRequest) GetOpenId() string {
	if x != nil {
		return x.OpenId
	}
	return ""
}

func (x *PayRequest) GetNotifyUrl() string {
	if x != nil {
		return x.NotifyUrl
	}
	return ""
}

type MpPayReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId     string `protobuf:"bytes,1,opt,name=AppId,proto3" json:"AppId,omitempty"`
	Timestamp string `protobuf:"bytes,2,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	Package   string `protobuf:"bytes,3,opt,name=Package,proto3" json:"Package,omitempty"`
	NonceStr  string `protobuf:"bytes,4,opt,name=NonceStr,proto3" json:"NonceStr,omitempty"`
	SignType  string `protobuf:"bytes,5,opt,name=SignType,proto3" json:"SignType,omitempty"`
	Sign      string `protobuf:"bytes,6,opt,name=Sign,proto3" json:"Sign,omitempty"`
}

func (x *MpPayReply) Reset() {
	*x = MpPayReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wx_pay_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MpPayReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MpPayReply) ProtoMessage() {}

func (x *MpPayReply) ProtoReflect() protoreflect.Message {
	mi := &file_wx_pay_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MpPayReply.ProtoReflect.Descriptor instead.
func (*MpPayReply) Descriptor() ([]byte, []int) {
	return file_wx_pay_proto_rawDescGZIP(), []int{1}
}

func (x *MpPayReply) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *MpPayReply) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *MpPayReply) GetPackage() string {
	if x != nil {
		return x.Package
	}
	return ""
}

func (x *MpPayReply) GetNonceStr() string {
	if x != nil {
		return x.NonceStr
	}
	return ""
}

func (x *MpPayReply) GetSignType() string {
	if x != nil {
		return x.SignType
	}
	return ""
}

func (x *MpPayReply) GetSign() string {
	if x != nil {
		return x.Sign
	}
	return ""
}

type PayReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId     string `protobuf:"bytes,1,opt,name=AppId,proto3" json:"AppId,omitempty"`
	NonceStr  string `protobuf:"bytes,2,opt,name=NonceStr,proto3" json:"NonceStr,omitempty"`
	MchId     string `protobuf:"bytes,3,opt,name=MchId,proto3" json:"MchId,omitempty"`
	PrepayId  string `protobuf:"bytes,4,opt,name=PrepayId,proto3" json:"PrepayId,omitempty"`
	Timestamp string `protobuf:"bytes,5,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	Sign      string `protobuf:"bytes,6,opt,name=Sign,proto3" json:"Sign,omitempty"`
	TradeType string `protobuf:"bytes,7,opt,name=TradeType,proto3" json:"TradeType,omitempty"`
}

func (x *PayReply) Reset() {
	*x = PayReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wx_pay_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayReply) ProtoMessage() {}

func (x *PayReply) ProtoReflect() protoreflect.Message {
	mi := &file_wx_pay_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayReply.ProtoReflect.Descriptor instead.
func (*PayReply) Descriptor() ([]byte, []int) {
	return file_wx_pay_proto_rawDescGZIP(), []int{2}
}

func (x *PayReply) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *PayReply) GetNonceStr() string {
	if x != nil {
		return x.NonceStr
	}
	return ""
}

func (x *PayReply) GetMchId() string {
	if x != nil {
		return x.MchId
	}
	return ""
}

func (x *PayReply) GetPrepayId() string {
	if x != nil {
		return x.PrepayId
	}
	return ""
}

func (x *PayReply) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *PayReply) GetSign() string {
	if x != nil {
		return x.Sign
	}
	return ""
}

func (x *PayReply) GetTradeType() string {
	if x != nil {
		return x.TradeType
	}
	return ""
}

type WapPayReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId     string `protobuf:"bytes,1,opt,name=AppId,proto3" json:"AppId,omitempty"`
	NonceStr  string `protobuf:"bytes,2,opt,name=NonceStr,proto3" json:"NonceStr,omitempty"`
	MchId     string `protobuf:"bytes,3,opt,name=MchId,proto3" json:"MchId,omitempty"`
	PrepayId  string `protobuf:"bytes,4,opt,name=PrepayId,proto3" json:"PrepayId,omitempty"`
	MWebUrl   string `protobuf:"bytes,5,opt,name=MWebUrl,proto3" json:"MWebUrl,omitempty"`
	Sign      string `protobuf:"bytes,6,opt,name=Sign,proto3" json:"Sign,omitempty"`
	TradeType string `protobuf:"bytes,7,opt,name=TradeType,proto3" json:"TradeType,omitempty"`
}

func (x *WapPayReply) Reset() {
	*x = WapPayReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wx_pay_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WapPayReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WapPayReply) ProtoMessage() {}

func (x *WapPayReply) ProtoReflect() protoreflect.Message {
	mi := &file_wx_pay_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WapPayReply.ProtoReflect.Descriptor instead.
func (*WapPayReply) Descriptor() ([]byte, []int) {
	return file_wx_pay_proto_rawDescGZIP(), []int{3}
}

func (x *WapPayReply) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *WapPayReply) GetNonceStr() string {
	if x != nil {
		return x.NonceStr
	}
	return ""
}

func (x *WapPayReply) GetMchId() string {
	if x != nil {
		return x.MchId
	}
	return ""
}

func (x *WapPayReply) GetPrepayId() string {
	if x != nil {
		return x.PrepayId
	}
	return ""
}

func (x *WapPayReply) GetMWebUrl() string {
	if x != nil {
		return x.MWebUrl
	}
	return ""
}

func (x *WapPayReply) GetSign() string {
	if x != nil {
		return x.Sign
	}
	return ""
}

func (x *WapPayReply) GetTradeType() string {
	if x != nil {
		return x.TradeType
	}
	return ""
}

type NativePayReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId     string `protobuf:"bytes,1,opt,name=AppId,proto3" json:"AppId,omitempty"`
	NonceStr  string `protobuf:"bytes,2,opt,name=NonceStr,proto3" json:"NonceStr,omitempty"`
	MchId     string `protobuf:"bytes,3,opt,name=MchId,proto3" json:"MchId,omitempty"`
	PrepayId  string `protobuf:"bytes,4,opt,name=PrepayId,proto3" json:"PrepayId,omitempty"`
	CodeUrl   string `protobuf:"bytes,5,opt,name=CodeUrl,proto3" json:"CodeUrl,omitempty"`
	Sign      string `protobuf:"bytes,6,opt,name=Sign,proto3" json:"Sign,omitempty"`
	TradeType string `protobuf:"bytes,7,opt,name=TradeType,proto3" json:"TradeType,omitempty"`
}

func (x *NativePayReply) Reset() {
	*x = NativePayReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wx_pay_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NativePayReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NativePayReply) ProtoMessage() {}

func (x *NativePayReply) ProtoReflect() protoreflect.Message {
	mi := &file_wx_pay_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NativePayReply.ProtoReflect.Descriptor instead.
func (*NativePayReply) Descriptor() ([]byte, []int) {
	return file_wx_pay_proto_rawDescGZIP(), []int{4}
}

func (x *NativePayReply) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *NativePayReply) GetNonceStr() string {
	if x != nil {
		return x.NonceStr
	}
	return ""
}

func (x *NativePayReply) GetMchId() string {
	if x != nil {
		return x.MchId
	}
	return ""
}

func (x *NativePayReply) GetPrepayId() string {
	if x != nil {
		return x.PrepayId
	}
	return ""
}

func (x *NativePayReply) GetCodeUrl() string {
	if x != nil {
		return x.CodeUrl
	}
	return ""
}

func (x *NativePayReply) GetSign() string {
	if x != nil {
		return x.Sign
	}
	return ""
}

func (x *NativePayReply) GetTradeType() string {
	if x != nil {
		return x.TradeType
	}
	return ""
}

// 支付查询
type PayQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutTradeNo    string `protobuf:"bytes,1,opt,name=OutTradeNo,proto3" json:"OutTradeNo,omitempty"`
	TransactionId string `protobuf:"bytes,2,opt,name=TransactionId,proto3" json:"TransactionId,omitempty"`
	AppId         string `protobuf:"bytes,3,opt,name=AppId,proto3" json:"AppId,omitempty"`
	MchId         string `protobuf:"bytes,4,opt,name=MchId,proto3" json:"MchId,omitempty"`
	Secret        string `protobuf:"bytes,5,opt,name=Secret,proto3" json:"Secret,omitempty"`
	ApiKey        string `protobuf:"bytes,6,opt,name=ApiKey,proto3" json:"ApiKey,omitempty"`
}

func (x *PayQueryRequest) Reset() {
	*x = PayQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wx_pay_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayQueryRequest) ProtoMessage() {}

func (x *PayQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wx_pay_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayQueryRequest.ProtoReflect.Descriptor instead.
func (*PayQueryRequest) Descriptor() ([]byte, []int) {
	return file_wx_pay_proto_rawDescGZIP(), []int{5}
}

func (x *PayQueryRequest) GetOutTradeNo() string {
	if x != nil {
		return x.OutTradeNo
	}
	return ""
}

func (x *PayQueryRequest) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *PayQueryRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *PayQueryRequest) GetMchId() string {
	if x != nil {
		return x.MchId
	}
	return ""
}

func (x *PayQueryRequest) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

func (x *PayQueryRequest) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

type PayQueryReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryResult []byte `protobuf:"bytes,1,opt,name=QueryResult,proto3" json:"QueryResult,omitempty"`
}

func (x *PayQueryReply) Reset() {
	*x = PayQueryReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wx_pay_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayQueryReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayQueryReply) ProtoMessage() {}

func (x *PayQueryReply) ProtoReflect() protoreflect.Message {
	mi := &file_wx_pay_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayQueryReply.ProtoReflect.Descriptor instead.
func (*PayQueryReply) Descriptor() ([]byte, []int) {
	return file_wx_pay_proto_rawDescGZIP(), []int{6}
}

func (x *PayQueryReply) GetQueryResult() []byte {
	if x != nil {
		return x.QueryResult
	}
	return nil
}

type RefundRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutTradeNo    string  `protobuf:"bytes,1,opt,name=OutTradeNo,proto3" json:"OutTradeNo,omitempty"`
	TransactionId string  `protobuf:"bytes,2,opt,name=TransactionId,proto3" json:"TransactionId,omitempty"`
	OutRefundNo   string  `protobuf:"bytes,3,opt,name=OutRefundNo,proto3" json:"OutRefundNo,omitempty"`
	RefundFee     float32 `protobuf:"fixed32,4,opt,name=RefundFee,proto3" json:"RefundFee,omitempty"`
	RefundDesc    string  `protobuf:"bytes,5,opt,name=RefundDesc,proto3" json:"RefundDesc,omitempty"`
	AppId         string  `protobuf:"bytes,6,opt,name=AppId,proto3" json:"AppId,omitempty"`
	MchId         string  `protobuf:"bytes,7,opt,name=MchId,proto3" json:"MchId,omitempty"`
	Secret        string  `protobuf:"bytes,8,opt,name=Secret,proto3" json:"Secret,omitempty"`
	ApiKey        string  `protobuf:"bytes,9,opt,name=ApiKey,proto3" json:"ApiKey,omitempty"`
	TotalFee      float32 `protobuf:"fixed32,10,opt,name=TotalFee,proto3" json:"TotalFee,omitempty"`
	NotifyUrl     string  `protobuf:"bytes,11,opt,name=NotifyUrl,proto3" json:"NotifyUrl,omitempty"`
}

func (x *RefundRequest) Reset() {
	*x = RefundRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wx_pay_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefundRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefundRequest) ProtoMessage() {}

func (x *RefundRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wx_pay_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefundRequest.ProtoReflect.Descriptor instead.
func (*RefundRequest) Descriptor() ([]byte, []int) {
	return file_wx_pay_proto_rawDescGZIP(), []int{7}
}

func (x *RefundRequest) GetOutTradeNo() string {
	if x != nil {
		return x.OutTradeNo
	}
	return ""
}

func (x *RefundRequest) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *RefundRequest) GetOutRefundNo() string {
	if x != nil {
		return x.OutRefundNo
	}
	return ""
}

func (x *RefundRequest) GetRefundFee() float32 {
	if x != nil {
		return x.RefundFee
	}
	return 0
}

func (x *RefundRequest) GetRefundDesc() string {
	if x != nil {
		return x.RefundDesc
	}
	return ""
}

func (x *RefundRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *RefundRequest) GetMchId() string {
	if x != nil {
		return x.MchId
	}
	return ""
}

func (x *RefundRequest) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

func (x *RefundRequest) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

func (x *RefundRequest) GetTotalFee() float32 {
	if x != nil {
		return x.TotalFee
	}
	return 0
}

func (x *RefundRequest) GetNotifyUrl() string {
	if x != nil {
		return x.NotifyUrl
	}
	return ""
}

type RefundReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefundResult []byte `protobuf:"bytes,1,opt,name=RefundResult,proto3" json:"RefundResult,omitempty"`
}

func (x *RefundReply) Reset() {
	*x = RefundReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wx_pay_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefundReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefundReply) ProtoMessage() {}

func (x *RefundReply) ProtoReflect() protoreflect.Message {
	mi := &file_wx_pay_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefundReply.ProtoReflect.Descriptor instead.
func (*RefundReply) Descriptor() ([]byte, []int) {
	return file_wx_pay_proto_rawDescGZIP(), []int{8}
}

func (x *RefundReply) GetRefundResult() []byte {
	if x != nil {
		return x.RefundResult
	}
	return nil
}

type RefundQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutTradeNo    string `protobuf:"bytes,1,opt,name=OutTradeNo,proto3" json:"OutTradeNo,omitempty"`
	OutRefundNo   string `protobuf:"bytes,2,opt,name=OutRefundNo,proto3" json:"OutRefundNo,omitempty"`
	RefundId      string `protobuf:"bytes,3,opt,name=RefundId,proto3" json:"RefundId,omitempty"`
	AppId         string `protobuf:"bytes,4,opt,name=AppId,proto3" json:"AppId,omitempty"`
	MchId         string `protobuf:"bytes,5,opt,name=MchId,proto3" json:"MchId,omitempty"`
	Secret        string `protobuf:"bytes,6,opt,name=Secret,proto3" json:"Secret,omitempty"`
	ApiKey        string `protobuf:"bytes,7,opt,name=ApiKey,proto3" json:"ApiKey,omitempty"`
	TransactionId string `protobuf:"bytes,8,opt,name=TransactionId,proto3" json:"TransactionId,omitempty"`
}

func (x *RefundQueryRequest) Reset() {
	*x = RefundQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wx_pay_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefundQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefundQueryRequest) ProtoMessage() {}

func (x *RefundQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wx_pay_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefundQueryRequest.ProtoReflect.Descriptor instead.
func (*RefundQueryRequest) Descriptor() ([]byte, []int) {
	return file_wx_pay_proto_rawDescGZIP(), []int{9}
}

func (x *RefundQueryRequest) GetOutTradeNo() string {
	if x != nil {
		return x.OutTradeNo
	}
	return ""
}

func (x *RefundQueryRequest) GetOutRefundNo() string {
	if x != nil {
		return x.OutRefundNo
	}
	return ""
}

func (x *RefundQueryRequest) GetRefundId() string {
	if x != nil {
		return x.RefundId
	}
	return ""
}

func (x *RefundQueryRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *RefundQueryRequest) GetMchId() string {
	if x != nil {
		return x.MchId
	}
	return ""
}

func (x *RefundQueryRequest) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

func (x *RefundQueryRequest) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

func (x *RefundQueryRequest) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

type RefundQueryReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefundQueryResult []byte `protobuf:"bytes,1,opt,name=RefundQueryResult,proto3" json:"RefundQueryResult,omitempty"`
}

func (x *RefundQueryReply) Reset() {
	*x = RefundQueryReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wx_pay_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefundQueryReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefundQueryReply) ProtoMessage() {}

func (x *RefundQueryReply) ProtoReflect() protoreflect.Message {
	mi := &file_wx_pay_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefundQueryReply.ProtoReflect.Descriptor instead.
func (*RefundQueryReply) Descriptor() ([]byte, []int) {
	return file_wx_pay_proto_rawDescGZIP(), []int{10}
}

func (x *RefundQueryReply) GetRefundQueryResult() []byte {
	if x != nil {
		return x.RefundQueryResult
	}
	return nil
}

var File_wx_pay_proto protoreflect.FileDescriptor

var file_wx_pay_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x77, 0x78, 0x5f, 0x70, 0x61, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09,
	0x77, 0x65, 0x69, 0x78, 0x69, 0x6e, 0x5f, 0x70, 0x62, 0x22, 0xae, 0x02, 0x0a, 0x0a, 0x50, 0x61,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x63, 0x68, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4d, 0x63, 0x68, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x41, 0x70,
	0x69, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x75, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4f, 0x75, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f,
	0x12, 0x1a, 0x0a, 0x08, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x65, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x08, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x65, 0x65, 0x12, 0x26, 0x0a, 0x0e,
	0x53, 0x70, 0x62, 0x69, 0x6c, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x70, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x53, 0x70, 0x62, 0x69, 0x6c, 0x6c, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x49, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x55, 0x72, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x55, 0x72, 0x6c, 0x22, 0xa6, 0x01, 0x0a, 0x0a, 0x4d,
	0x70, 0x50, 0x61, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x0a,
	0x07, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x6f, 0x6e, 0x63, 0x65,
	0x53, 0x74, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4e, 0x6f, 0x6e, 0x63, 0x65,
	0x53, 0x74, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x69, 0x67, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x69, 0x67, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x53, 0x69, 0x67, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x53,
	0x69, 0x67, 0x6e, 0x22, 0xbe, 0x01, 0x0a, 0x08, 0x50, 0x61, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x53,
	0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x53,
	0x74, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x63, 0x68, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x4d, 0x63, 0x68, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x65, 0x70,
	0x61, 0x79, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x72, 0x65, 0x70,
	0x61, 0x79, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x69, 0x67, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x22, 0xbd, 0x01, 0x0a, 0x0b, 0x57, 0x61, 0x70, 0x50, 0x61, 0x79, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x6f,
	0x6e, 0x63, 0x65, 0x53, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4e, 0x6f,
	0x6e, 0x63, 0x65, 0x53, 0x74, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x63, 0x68, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4d, 0x63, 0x68, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x50, 0x72, 0x65, 0x70, 0x61, 0x79, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x50, 0x72, 0x65, 0x70, 0x61, 0x79, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x57, 0x65, 0x62,
	0x55, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x57, 0x65, 0x62, 0x55,
	0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x69, 0x67, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x22, 0xc0, 0x01, 0x0a, 0x0e, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x50,
	0x61, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x63, 0x68,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4d, 0x63, 0x68, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x50, 0x72, 0x65, 0x70, 0x61, 0x79, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x50, 0x72, 0x65, 0x70, 0x61, 0x79, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x43,
	0x6f, 0x64, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f,
	0x64, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x69, 0x67, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0xb3, 0x01, 0x0a, 0x0f, 0x50, 0x61, 0x79, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x4f,
	0x75, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x4f, 0x75, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x63, 0x68, 0x49, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4d, 0x63, 0x68, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x22, 0x31, 0x0a,
	0x0d, 0x50, 0x61, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x20,
	0x0a, 0x0b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0xcb, 0x02, 0x0a, 0x0d, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x75, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4f, 0x75, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x4e, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x75, 0x74, 0x52,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x4e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f,
	0x75, 0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4e, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x46, 0x65, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x52,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x46, 0x65, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x44, 0x65, 0x73, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x52, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x44, 0x65, 0x73, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x4d, 0x63, 0x68, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4d,
	0x63, 0x68, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x41, 0x70,
	0x69, 0x4b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x65, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x65, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x55, 0x72, 0x6c, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x55, 0x72, 0x6c, 0x22, 0x31,
	0x0a, 0x0b, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x22, 0x0a,
	0x0c, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0c, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0xf4, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x75, 0x74, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4f, 0x75,
	0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x75, 0x74, 0x52,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x4e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f,
	0x75, 0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x4d, 0x63, 0x68, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4d, 0x63, 0x68,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x70,
	0x69, 0x4b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x41, 0x70, 0x69, 0x4b,
	0x65, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x40, 0x0a, 0x10, 0x52, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2c, 0x0a, 0x11,
	0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0xa2, 0x04, 0x0a, 0x05, 0x57,
	0x78, 0x50, 0x61, 0x79, 0x12, 0x3c, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4d, 0x70, 0x50,
	0x61, 0x79, 0x12, 0x15, 0x2e, 0x77, 0x65, 0x69, 0x78, 0x69, 0x6e, 0x5f, 0x70, 0x62, 0x2e, 0x50,
	0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x77, 0x65, 0x69, 0x78,
	0x69, 0x6e, 0x5f, 0x70, 0x62, 0x2e, 0x4d, 0x70, 0x50, 0x61, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x12, 0x3b, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x70, 0x70, 0x50, 0x61,
	0x79, 0x12, 0x15, 0x2e, 0x77, 0x65, 0x69, 0x78, 0x69, 0x6e, 0x5f, 0x70, 0x62, 0x2e, 0x50, 0x61,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x77, 0x65, 0x69, 0x78, 0x69,
	0x6e, 0x5f, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x3e, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x64, 0x65, 0x57, 0x61, 0x70, 0x50, 0x61, 0x79, 0x12, 0x15,
	0x2e, 0x77, 0x65, 0x69, 0x78, 0x69, 0x6e, 0x5f, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x77, 0x65, 0x69, 0x78, 0x69, 0x6e, 0x5f, 0x70,
	0x62, 0x2e, 0x57, 0x61, 0x70, 0x50, 0x61, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x3d, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4a, 0x73, 0x41, 0x70, 0x69, 0x50, 0x61, 0x79,
	0x12, 0x15, 0x2e, 0x77, 0x65, 0x69, 0x78, 0x69, 0x6e, 0x5f, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x77, 0x65, 0x69, 0x78, 0x69, 0x6e,
	0x5f, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x44,
	0x0a, 0x0e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x50, 0x61, 0x79,
	0x12, 0x15, 0x2e, 0x77, 0x65, 0x69, 0x78, 0x69, 0x6e, 0x5f, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x77, 0x65, 0x69, 0x78, 0x69, 0x6e,
	0x5f, 0x70, 0x62, 0x2e, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x50, 0x61, 0x79, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x65, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x1a, 0x2e, 0x77, 0x65, 0x69, 0x78, 0x69, 0x6e, 0x5f, 0x70, 0x62, 0x2e, 0x50,
	0x61, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18,
	0x2e, 0x77, 0x65, 0x69, 0x78, 0x69, 0x6e, 0x5f, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x79, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x0b, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x12, 0x18, 0x2e, 0x77, 0x65, 0x69, 0x78,
	0x69, 0x6e, 0x5f, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x77, 0x65, 0x69, 0x78, 0x69, 0x6e, 0x5f, 0x70, 0x62, 0x2e,
	0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x50, 0x0a,
	0x10, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x1d, 0x2e, 0x77, 0x65, 0x69, 0x78, 0x69, 0x6e, 0x5f, 0x70, 0x62, 0x2e, 0x52, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1b, 0x2e, 0x77, 0x65, 0x69, 0x78, 0x69, 0x6e, 0x5f, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x42,
	0x18, 0x5a, 0x16, 0x2e, 0x2e, 0x2f, 0x77, 0x65, 0x69, 0x78, 0x69, 0x6e, 0x5f, 0x70, 0x62, 0x3b,
	0x77, 0x65, 0x69, 0x78, 0x69, 0x6e, 0x5f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_wx_pay_proto_rawDescOnce sync.Once
	file_wx_pay_proto_rawDescData = file_wx_pay_proto_rawDesc
)

func file_wx_pay_proto_rawDescGZIP() []byte {
	file_wx_pay_proto_rawDescOnce.Do(func() {
		file_wx_pay_proto_rawDescData = protoimpl.X.CompressGZIP(file_wx_pay_proto_rawDescData)
	})
	return file_wx_pay_proto_rawDescData
}

var file_wx_pay_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_wx_pay_proto_goTypes = []interface{}{
	(*PayRequest)(nil),         // 0: weixin_pb.PayRequest
	(*MpPayReply)(nil),         // 1: weixin_pb.MpPayReply
	(*PayReply)(nil),           // 2: weixin_pb.PayReply
	(*WapPayReply)(nil),        // 3: weixin_pb.WapPayReply
	(*NativePayReply)(nil),     // 4: weixin_pb.NativePayReply
	(*PayQueryRequest)(nil),    // 5: weixin_pb.PayQueryRequest
	(*PayQueryReply)(nil),      // 6: weixin_pb.PayQueryReply
	(*RefundRequest)(nil),      // 7: weixin_pb.RefundRequest
	(*RefundReply)(nil),        // 8: weixin_pb.RefundReply
	(*RefundQueryRequest)(nil), // 9: weixin_pb.RefundQueryRequest
	(*RefundQueryReply)(nil),   // 10: weixin_pb.RefundQueryReply
}
var file_wx_pay_proto_depIdxs = []int32{
	0,  // 0: weixin_pb.WxPay.TradeMpPay:input_type -> weixin_pb.PayRequest
	0,  // 1: weixin_pb.WxPay.TradeAppPay:input_type -> weixin_pb.PayRequest
	0,  // 2: weixin_pb.WxPay.TradeWapPay:input_type -> weixin_pb.PayRequest
	0,  // 3: weixin_pb.WxPay.TradeJsApiPay:input_type -> weixin_pb.PayRequest
	0,  // 4: weixin_pb.WxPay.TradeNativePay:input_type -> weixin_pb.PayRequest
	5,  // 5: weixin_pb.WxPay.TradeQuery:input_type -> weixin_pb.PayQueryRequest
	7,  // 6: weixin_pb.WxPay.TradeRefund:input_type -> weixin_pb.RefundRequest
	9,  // 7: weixin_pb.WxPay.TradeRefundQuery:input_type -> weixin_pb.RefundQueryRequest
	1,  // 8: weixin_pb.WxPay.TradeMpPay:output_type -> weixin_pb.MpPayReply
	2,  // 9: weixin_pb.WxPay.TradeAppPay:output_type -> weixin_pb.PayReply
	3,  // 10: weixin_pb.WxPay.TradeWapPay:output_type -> weixin_pb.WapPayReply
	2,  // 11: weixin_pb.WxPay.TradeJsApiPay:output_type -> weixin_pb.PayReply
	4,  // 12: weixin_pb.WxPay.TradeNativePay:output_type -> weixin_pb.NativePayReply
	6,  // 13: weixin_pb.WxPay.TradeQuery:output_type -> weixin_pb.PayQueryReply
	8,  // 14: weixin_pb.WxPay.TradeRefund:output_type -> weixin_pb.RefundReply
	10, // 15: weixin_pb.WxPay.TradeRefundQuery:output_type -> weixin_pb.RefundQueryReply
	8,  // [8:16] is the sub-list for method output_type
	0,  // [0:8] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_wx_pay_proto_init() }
func file_wx_pay_proto_init() {
	if File_wx_pay_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_wx_pay_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PayRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wx_pay_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MpPayReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wx_pay_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PayReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wx_pay_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WapPayReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wx_pay_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NativePayReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wx_pay_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PayQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wx_pay_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PayQueryReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wx_pay_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefundRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wx_pay_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefundReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wx_pay_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefundQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wx_pay_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefundQueryReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_wx_pay_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_wx_pay_proto_goTypes,
		DependencyIndexes: file_wx_pay_proto_depIdxs,
		MessageInfos:      file_wx_pay_proto_msgTypes,
	}.Build()
	File_wx_pay_proto = out.File
	file_wx_pay_proto_rawDesc = nil
	file_wx_pay_proto_goTypes = nil
	file_wx_pay_proto_depIdxs = nil
}
