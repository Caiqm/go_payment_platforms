// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.0
// source: wx_pay.proto

package weixin_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	WxPay_TradeMpPay_FullMethodName       = "/weixin_pb.WxPay/TradeMpPay"
	WxPay_TradeAppPay_FullMethodName      = "/weixin_pb.WxPay/TradeAppPay"
	WxPay_TradeWapPay_FullMethodName      = "/weixin_pb.WxPay/TradeWapPay"
	WxPay_TradeJsApiPay_FullMethodName    = "/weixin_pb.WxPay/TradeJsApiPay"
	WxPay_TradeNativePay_FullMethodName   = "/weixin_pb.WxPay/TradeNativePay"
	WxPay_TradeQuery_FullMethodName       = "/weixin_pb.WxPay/TradeQuery"
	WxPay_TradeRefund_FullMethodName      = "/weixin_pb.WxPay/TradeRefund"
	WxPay_TradeRefundQuery_FullMethodName = "/weixin_pb.WxPay/TradeRefundQuery"
)

// WxPayClient is the client API for WxPay service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WxPayClient interface {
	TradeMpPay(ctx context.Context, in *PayRequest, opts ...grpc.CallOption) (*MpPayReply, error)
	TradeAppPay(ctx context.Context, in *PayRequest, opts ...grpc.CallOption) (*PayReply, error)
	TradeWapPay(ctx context.Context, in *PayRequest, opts ...grpc.CallOption) (*WapPayReply, error)
	TradeJsApiPay(ctx context.Context, in *PayRequest, opts ...grpc.CallOption) (*PayReply, error)
	TradeNativePay(ctx context.Context, in *PayRequest, opts ...grpc.CallOption) (*NativePayReply, error)
	TradeQuery(ctx context.Context, in *PayQueryRequest, opts ...grpc.CallOption) (*PayQueryReply, error)
	TradeRefund(ctx context.Context, in *RefundRequest, opts ...grpc.CallOption) (*RefundReply, error)
	TradeRefundQuery(ctx context.Context, in *RefundQueryRequest, opts ...grpc.CallOption) (*RefundQueryReply, error)
}

type wxPayClient struct {
	cc grpc.ClientConnInterface
}

func NewWxPayClient(cc grpc.ClientConnInterface) WxPayClient {
	return &wxPayClient{cc}
}

func (c *wxPayClient) TradeMpPay(ctx context.Context, in *PayRequest, opts ...grpc.CallOption) (*MpPayReply, error) {
	out := new(MpPayReply)
	err := c.cc.Invoke(ctx, WxPay_TradeMpPay_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wxPayClient) TradeAppPay(ctx context.Context, in *PayRequest, opts ...grpc.CallOption) (*PayReply, error) {
	out := new(PayReply)
	err := c.cc.Invoke(ctx, WxPay_TradeAppPay_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wxPayClient) TradeWapPay(ctx context.Context, in *PayRequest, opts ...grpc.CallOption) (*WapPayReply, error) {
	out := new(WapPayReply)
	err := c.cc.Invoke(ctx, WxPay_TradeWapPay_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wxPayClient) TradeJsApiPay(ctx context.Context, in *PayRequest, opts ...grpc.CallOption) (*PayReply, error) {
	out := new(PayReply)
	err := c.cc.Invoke(ctx, WxPay_TradeJsApiPay_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wxPayClient) TradeNativePay(ctx context.Context, in *PayRequest, opts ...grpc.CallOption) (*NativePayReply, error) {
	out := new(NativePayReply)
	err := c.cc.Invoke(ctx, WxPay_TradeNativePay_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wxPayClient) TradeQuery(ctx context.Context, in *PayQueryRequest, opts ...grpc.CallOption) (*PayQueryReply, error) {
	out := new(PayQueryReply)
	err := c.cc.Invoke(ctx, WxPay_TradeQuery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wxPayClient) TradeRefund(ctx context.Context, in *RefundRequest, opts ...grpc.CallOption) (*RefundReply, error) {
	out := new(RefundReply)
	err := c.cc.Invoke(ctx, WxPay_TradeRefund_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wxPayClient) TradeRefundQuery(ctx context.Context, in *RefundQueryRequest, opts ...grpc.CallOption) (*RefundQueryReply, error) {
	out := new(RefundQueryReply)
	err := c.cc.Invoke(ctx, WxPay_TradeRefundQuery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WxPayServer is the server API for WxPay service.
// All implementations must embed UnimplementedWxPayServer
// for forward compatibility
type WxPayServer interface {
	TradeMpPay(context.Context, *PayRequest) (*MpPayReply, error)
	TradeAppPay(context.Context, *PayRequest) (*PayReply, error)
	TradeWapPay(context.Context, *PayRequest) (*WapPayReply, error)
	TradeJsApiPay(context.Context, *PayRequest) (*PayReply, error)
	TradeNativePay(context.Context, *PayRequest) (*NativePayReply, error)
	TradeQuery(context.Context, *PayQueryRequest) (*PayQueryReply, error)
	TradeRefund(context.Context, *RefundRequest) (*RefundReply, error)
	TradeRefundQuery(context.Context, *RefundQueryRequest) (*RefundQueryReply, error)
	mustEmbedUnimplementedWxPayServer()
}

// UnimplementedWxPayServer must be embedded to have forward compatible implementations.
type UnimplementedWxPayServer struct {
}

func (UnimplementedWxPayServer) TradeMpPay(context.Context, *PayRequest) (*MpPayReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TradeMpPay not implemented")
}
func (UnimplementedWxPayServer) TradeAppPay(context.Context, *PayRequest) (*PayReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TradeAppPay not implemented")
}
func (UnimplementedWxPayServer) TradeWapPay(context.Context, *PayRequest) (*WapPayReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TradeWapPay not implemented")
}
func (UnimplementedWxPayServer) TradeJsApiPay(context.Context, *PayRequest) (*PayReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TradeJsApiPay not implemented")
}
func (UnimplementedWxPayServer) TradeNativePay(context.Context, *PayRequest) (*NativePayReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TradeNativePay not implemented")
}
func (UnimplementedWxPayServer) TradeQuery(context.Context, *PayQueryRequest) (*PayQueryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TradeQuery not implemented")
}
func (UnimplementedWxPayServer) TradeRefund(context.Context, *RefundRequest) (*RefundReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TradeRefund not implemented")
}
func (UnimplementedWxPayServer) TradeRefundQuery(context.Context, *RefundQueryRequest) (*RefundQueryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TradeRefundQuery not implemented")
}
func (UnimplementedWxPayServer) mustEmbedUnimplementedWxPayServer() {}

// UnsafeWxPayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WxPayServer will
// result in compilation errors.
type UnsafeWxPayServer interface {
	mustEmbedUnimplementedWxPayServer()
}

func RegisterWxPayServer(s grpc.ServiceRegistrar, srv WxPayServer) {
	s.RegisterService(&WxPay_ServiceDesc, srv)
}

func _WxPay_TradeMpPay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WxPayServer).TradeMpPay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WxPay_TradeMpPay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WxPayServer).TradeMpPay(ctx, req.(*PayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WxPay_TradeAppPay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WxPayServer).TradeAppPay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WxPay_TradeAppPay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WxPayServer).TradeAppPay(ctx, req.(*PayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WxPay_TradeWapPay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WxPayServer).TradeWapPay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WxPay_TradeWapPay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WxPayServer).TradeWapPay(ctx, req.(*PayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WxPay_TradeJsApiPay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WxPayServer).TradeJsApiPay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WxPay_TradeJsApiPay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WxPayServer).TradeJsApiPay(ctx, req.(*PayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WxPay_TradeNativePay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WxPayServer).TradeNativePay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WxPay_TradeNativePay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WxPayServer).TradeNativePay(ctx, req.(*PayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WxPay_TradeQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WxPayServer).TradeQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WxPay_TradeQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WxPayServer).TradeQuery(ctx, req.(*PayQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WxPay_TradeRefund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WxPayServer).TradeRefund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WxPay_TradeRefund_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WxPayServer).TradeRefund(ctx, req.(*RefundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WxPay_TradeRefundQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefundQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WxPayServer).TradeRefundQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WxPay_TradeRefundQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WxPayServer).TradeRefundQuery(ctx, req.(*RefundQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WxPay_ServiceDesc is the grpc.ServiceDesc for WxPay service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WxPay_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "weixin_pb.WxPay",
	HandlerType: (*WxPayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TradeMpPay",
			Handler:    _WxPay_TradeMpPay_Handler,
		},
		{
			MethodName: "TradeAppPay",
			Handler:    _WxPay_TradeAppPay_Handler,
		},
		{
			MethodName: "TradeWapPay",
			Handler:    _WxPay_TradeWapPay_Handler,
		},
		{
			MethodName: "TradeJsApiPay",
			Handler:    _WxPay_TradeJsApiPay_Handler,
		},
		{
			MethodName: "TradeNativePay",
			Handler:    _WxPay_TradeNativePay_Handler,
		},
		{
			MethodName: "TradeQuery",
			Handler:    _WxPay_TradeQuery_Handler,
		},
		{
			MethodName: "TradeRefund",
			Handler:    _WxPay_TradeRefund_Handler,
		},
		{
			MethodName: "TradeRefundQuery",
			Handler:    _WxPay_TradeRefundQuery_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wx_pay.proto",
}
